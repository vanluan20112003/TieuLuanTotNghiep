const botReplies = {
    "T∆∞ v·∫•n s·∫£n ph·∫©m": [
        "Ch√∫ng t√¥i c√≥ nhi·ªÅu s·∫£n ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n. B·∫°n quan t√¢m ƒë·∫øn lo·∫°i s·∫£n ph·∫©m n√†o?",
        "R·∫•t vui ƒë∆∞·ª£c t∆∞ v·∫•n s·∫£n ph·∫©m. B·∫°n c√≥ th·ªÉ m√¥ t·∫£ th√™m v·ªÅ nhu c·∫ßu c·ªßa m√¨nh kh√¥ng?"
    ],
    "H·ªó tr·ª£ k·ªπ thu·∫≠t": [
        "Ch√∫ng t√¥i s·∫Ω h·ªó tr·ª£ k·ªπ thu·∫≠t ngay. Vui l√≤ng cho bi·∫øt chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i.",
        "ƒê·ªôi ng≈© k·ªπ thu·∫≠t c·ªßa ch√∫ng t√¥i s·∫µn s√†ng gi√∫p ƒë·ª°. B·∫°n c√≥ th·ªÉ cung c·∫•p th√™m th√¥ng tin kh√¥ng?"
    ],
    "Th·∫Øc m·∫Øc v·ªÅ ƒë∆°n h√†ng": [
        "ƒê·ªÉ tra c·ª©u ƒë∆°n h√†ng, b·∫°n vui l√≤ng cung c·∫•p m√£ ƒë∆°n h√†ng ƒë·ªÉ ch√∫ng t√¥i h·ªó tr·ª£.",
        "Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc v·ªÅ ƒë∆°n h√†ng c·ªßa b·∫°n."
    ],
    "Gi√° c·∫£": [
        "Ch√∫ng t√¥i c√≥ nhi·ªÅu ch∆∞∆°ng tr√¨nh ∆∞u ƒë√£i gi√°. B·∫°n quan t√¢m s·∫£n ph·∫©m n√†o?",
        "Gi√° c·∫£ lu√¥n linh ho·∫°t v√† c·∫°nh tranh nh·∫•t th·ªã tr∆∞·ªùng. Ch√∫ng t√¥i c√≥ th·ªÉ trao ƒë·ªïi chi ti·∫øt."
    ]
};

let shouldScroll = true;
let hasScrolledInitially = false;

// L·∫•y c√°c ph·∫ßn t·ª≠ DOM
const chatToggle = document.getElementById('chatToggle');
const chatWindow = document.getElementById('chatWindow');
const chatClose = document.getElementById('chatClose');
const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');
const unreadDot = document.getElementById('unreadDot');
const sendButton = document.getElementById('sendButton');

// Tr·∫°ng th√°i hi·ªÉn th·ªã chat
let isChatOpen = false;
function checkLoginStatus() {
    return fetch('http://localhost/web_ban_banh_kem/public/check-login-status') // API ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
        .then(response => response.json())
        .then(data => data.loggedIn);
}

// B·∫≠t/t·∫Øt chat
// B·∫≠t/t·∫Øt chat
chatToggle.addEventListener('click', async () => {
    const loggedIn = await checkLoginStatus();

    if (!loggedIn) {
        // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã th√¥ng b√°o v√† kh√¥ng m·ªü chat
        alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ chat.");
        chatWindow.style.display = 'none'; // ·∫®n c·ª≠a s·ªï chat n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
        return;
    }

    chatWindow.style.display = isChatOpen ? 'none' : 'flex';
    isChatOpen = !isChatOpen;

    if (isChatOpen) {
        unreadDot.style.display = 'none'; // ·∫®n d·∫•u ch·∫•m ƒë·ªè
        markMessagesAsRead(); // ƒê√°nh d·∫•u tin nh·∫Øn l√† ƒë√£ ƒë·ªçc
        loadChatMessages(); // T·∫£i tin nh·∫Øn v√†o c·ª≠a s·ªï chat
        hasScrolledInitially = false; // Reset bi·∫øn scroll
        shouldScroll = false; // D·ª´ng cu·ªôn t·ª± ƒë·ªông
    } else {
        shouldScroll = true; // K√≠ch ho·∫°t l·∫°i cu·ªôn t·ª± ƒë·ªông khi ƒë√≥ng
        hasScrolledInitially = false; // Reset l·∫°i bi·∫øn scroll
    }
});


// ƒê√≥ng chat
chatClose.addEventListener('click', () => {
    chatWindow.style.display = 'none';
    isChatOpen = false;
    chatToggle.textContent = 'üí¨';
});

// H√†m th√™m tin nh·∫Øn
// H√†m th√™m tin nh·∫Øn
function addMessage(text, type, timestamp = null) {
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('message', `${type}-message`);

    // T·∫°o n·ªôi dung hi·ªÉn th·ªã
    const messageContent = document.createElement('div');
    messageContent.classList.add('message-content');
    messageContent.textContent = text;

    // T·∫°o ph·∫ßn hi·ªÉn th·ªã th·ªùi gian
    const messageTime = document.createElement('div');
    messageTime.classList.add('message-time');

    // N·∫øu c√≥ th·ªùi gian t·ª´ API, s·ª≠ d·ª•ng th·ªùi gian ƒë√≥
    const time = timestamp ? new Date(timestamp) : new Date();

    // ƒê·ªãnh d·∫°ng ng√†y v√† gi·ªù, bao g·ªìm th·ª©, ng√†y, th√°ng, nƒÉm, gi·ªù v√† ph√∫t
    const options = {
        weekday: 'short',  // Ch·ªâ l·∫•y ch·ªØ t·∫Øt th·ª©
        day: '2-digit',    // Ng√†y d·∫°ng 2 ch·ªØ s·ªë
        month: '2-digit',  // Th√°ng d·∫°ng 2 ch·ªØ s·ªë
        year: 'numeric',   // NƒÉm ƒë·∫ßy ƒë·ªß
        hour: '2-digit',   // Gi·ªù 2 ch·ªØ s·ªë
        minute: '2-digit'  // Ph√∫t 2 ch·ªØ s·ªë
    };

    const formattedTime = time.toLocaleDateString('vi-VN', options);
    messageTime.textContent = formattedTime;

    // G·∫Øn n·ªôi dung v√† th·ªùi gian v√†o tin nh·∫Øn
    messageDiv.appendChild(messageContent);
    messageDiv.appendChild(messageTime);

    // Th√™m tin nh·∫Øn v√†o v√πng chat
    chatMessages.appendChild(messageDiv);

    // Cu·ªôn xu·ªëng cu·ªëi n·∫øu c·∫ßn
    if (shouldScroll) {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
}

// X·ª≠ l√Ω tin nh·∫Øn nhanh
function handleQuickReply(reply) {
    addMessage(reply, 'user');

    // T√¨m c√¢u tr·∫£ l·ªùi ph√π h·ª£p
    const matchedReplies = botReplies[reply] || [
        "C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m. Ch√∫ng t√¥i s·∫Ω h·ªó tr·ª£ b·∫°n ngay.",
        "Ch√∫ng t√¥i ƒëang x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n."
    ];

    const botReply = matchedReplies[Math.floor(Math.random() * matchedReplies.length)];
    setTimeout(() => {
        addMessage(botReply, 'bot');
    }, 500);
}

// G·ª≠i tin nh·∫Øn
function sendMessage() {
    const loggedIn = checkLoginStatus();

    if (!loggedIn) {
        // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã th√¥ng b√°o v√† kh√¥ng m·ªü chat
        alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ chat.");
        chatWindow.style.display = 'none'; // ·∫®n c·ª≠a s·ªï chat n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
        return;
    }
    const message = messageInput.value.trim();

    if (message) {
        // Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng trong giao di·ªán
        addMessage(message, 'user');
        messageInput.value = ''; // X√≥a n·ªôi dung trong input

        // Cu·ªôn xu·ªëng cu·ªëi khi g·ª≠i
        chatMessages.scrollTop = chatMessages.scrollHeight;

        // G·ª≠i tin nh·∫Øn ƒë·∫øn API
        fetch('http://localhost/web_ban_banh_kem/public/chat/send-message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify({
                content: message // N·ªôi dung tin nh·∫Øn
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn.');
                }
                return response.json();
            })
            .then(data => {
                console.log('Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c l∆∞u:', data);

                // Gi·∫£ l·∫≠p bot tr·∫£ l·ªùi t·ª± ƒë·ªông
                setTimeout(() => {
                    const botReplies = [
                        "C·∫£m ∆°n b·∫°n ƒë√£ nh·∫Øn tin. Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t.",
                        "R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n!",
                        "Xin ch√†o, c·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá."
                    ];
                    const botReply = botReplies[Math.floor(Math.random() * botReplies.length)];
                    addMessage(botReply, 'bot');
                    chatMessages.scrollTop = chatMessages.scrollHeight; // Cu·ªôn xu·ªëng cu·ªëi
                }, 1000);
            })
            .catch(error => console.error('L·ªói g·ª≠i tin nh·∫Øn:', error));
    }
}


// S·ª± ki·ªán g·ª≠i tin nh·∫Øn
sendButton.addEventListener('click', sendMessage);
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') sendMessage();
});

// Tin nh·∫Øn ch√†o m·ª´ng ban ƒë·∫ßu
addMessage("Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?", 'bot');

// Ki·ªÉm tra tr·∫°ng th√°i cu·ªôn
chatMessages.addEventListener('scroll', () => {
    const atBottom = chatMessages.scrollTop + chatMessages.clientHeight >= chatMessages.scrollHeight;
    shouldScroll = atBottom; // C·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôn
});

// H√†m t·∫£i tin nh·∫Øn
function loadChatMessages() {
    if (!isChatOpen || !shouldScroll) return; // Kh√¥ng t·∫£i n·∫øu chat ƒë√≥ng ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng ·ªü cu·ªëi

    fetch('http://localhost/web_ban_banh_kem/public/chat/messages')
        .then(response => {
            if (!response.ok) {
                if (response.status === 401) {
                    alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem tin nh·∫Øn.");
                }
                throw new Error("Kh√¥ng th·ªÉ t·∫£i tin nh·∫Øn.");
            }
            return response.json();
        })
        .then(data => {
            if (data.messages) {
                chatMessages.innerHTML = ""; // X√≥a n·ªôi dung c≈©
                data.messages.forEach(message => {
                    const type = message.is_user_send ? "user" : "bot";
                    const timestamp = message.sent_at; // L·∫•y th·ªùi gian sent_at t·ª´ API
                    addMessage(message.content, type, timestamp); // Truy·ªÅn timestamp v√†o h√†m addMessage
                });

                // Ch·ªâ scroll xu·ªëng m·ªôt l·∫ßn ƒë·∫ßu ti√™n khi m·ªü chat
                if (!hasScrolledInitially) {
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                    hasScrolledInitially = true;
                }
            }
        })
        .catch(error => console.error(error));
}

// Ki·ªÉm tra tin nh·∫Øn ch∆∞a ƒë·ªçc
// Ki·ªÉm tra tin nh·∫Øn ch∆∞a ƒë·ªçc
function checkUnreadMessages() {
    checkLoginStatus().then(loggedIn => {
        if (!loggedIn) return; // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, kh√¥ng ki·ªÉm tra tin nh·∫Øn ch∆∞a ƒë·ªçc

        if (isChatOpen) return; // Kh√¥ng ki·ªÉm tra n·∫øu chat ƒëang m·ªü

        fetch('http://localhost/web_ban_banh_kem/public/chat/unread-messages')
            .then(response => {
                if (!response.ok) {
                    throw new Error('L·ªói khi ki·ªÉm tra tin nh·∫Øn ch∆∞a ƒë·ªçc');
                }
                return response.json();
            })
            .then(data => {
                if (data.unread_count && data.unread_count > 0) {
                    unreadDot.style.display = 'block'; // Hi·ªÉn th·ªã d·∫•u ch·∫•m ƒë·ªè
                } else {
                    unreadDot.style.display = 'none'; // ·∫®n d·∫•u ch·∫•m ƒë·ªè
                }
            })
            .catch(error => console.error('L·ªói khi ki·ªÉm tra tin nh·∫Øn ch∆∞a ƒë·ªçc:', error));
    });
}


// ƒê√°nh d·∫•u tin nh·∫Øn l√† ƒë√£ ƒë·ªçc
function markMessagesAsRead() {
    fetch('http://localhost/web_ban_banh_kem/public/chat/mark-as-read', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
    })
        .then(response => {
            if (!response.ok) {
                throw new Error('Kh√¥ng th·ªÉ ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc.');
            }
            console.log('Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc.');
        })
        .catch(error => console.error('L·ªói khi ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc:', error));
}

// Ki·ªÉm tra l·∫ßn ƒë·∫ßu khi t·∫£i trang
checkUnreadMessages();
setInterval(() => {
    if (isChatOpen && shouldScroll) {
        loadChatMessages(); // Ch·ªâ t·∫£i n·∫øu chat m·ªü v√† cu·ªôn ·ªü cu·ªëi
    }
}, 5000);

setInterval(() => {
    checkLoginStatus().then(loggedIn => {
        if (!loggedIn) return; // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, kh√¥ng ki·ªÉm tra tin nh·∫Øn ch∆∞a ƒë·ªçc

        if (!isChatOpen) {
            checkUnreadMessages(); // Ch·ªâ ki·ªÉm tra n·∫øu chat t·∫Øt
        }
    });
}, 20000);
